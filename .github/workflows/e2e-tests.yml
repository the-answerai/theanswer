name: E2E Tests

permissions:
    contents: read

on:
    push:
        branches: [main, staging, production]
    pull_request:
        types: [opened, synchronize, reopened]
        branches:
            - '**'
    workflow_dispatch:

jobs:
    e2e:
        name: Run E2E Tests
        if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
        runs-on: ubuntu-latest
        timeout-minutes: 45 # Increased for safety
        env:
            BWS_ACCESS_TOKEN: ${{ secrets.BWS_ACCESS_TOKEN }}

        services:
            postgres:
                image: pgvector/pgvector:pg16
                env:
                    # IMPORTANT: Services start before workflow, so these must be hardcoded
                    # Format: test_<DATABASE_USER from BWS>
                    # If your BWS DATABASE_USER changes, update this accordingly
                    POSTGRES_USER: test_example_user
                    POSTGRES_PASSWORD: example_password
                    POSTGRES_DB: test_flowise
                options: >-
                    --health-cmd pg_isready
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5
                ports:
                    - 5432:5432

            redis:
                image: redis:latest
                options: >-
                    --health-cmd "redis-cli ping"
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5
                ports:
                    - 6379:6379

        steps:
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                  submodules: recursive

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: '20'

            - name: Install pnpm
              uses: pnpm/action-setup@v3
              with:
                  version: 9

            - name: Get pnpm store directory
              shell: bash
              run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

            - name: Setup pnpm cache
              uses: actions/cache@v4
              with:
                  path: ${{ env.STORE_PATH }}
                  key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
                  restore-keys: |
                      ${{ runner.os }}-pnpm-store-

            - name: Install dependencies
              run: pnpm install --frozen-lockfile

            - name: Install PostgreSQL client
              run: |
                  sudo apt-get update
                  sudo apt-get install -y postgresql-client

            - name: Setup test database
              env:
                  PGPASSWORD: example_password
              run: |
                  until pg_isready -h localhost -p 5432 -U test_example_user; do
                    echo "Waiting for PostgreSQL..."
                    sleep 2
                  done

                  psql -h localhost -U test_example_user -d test_flowise -c "CREATE EXTENSION IF NOT EXISTS vector;"
                  psql -h localhost -U test_example_user -d test_flowise -c "SELECT version();"

                  echo "✅ PostgreSQL ready: test_flowise (user: test_example_user)"

            - name: Build packages
              run: pnpm build

            - name: Install Playwright browsers
              working-directory: apps/web
              run: pnpm exec playwright install --with-deps chromium

            - name: Start application stack
              env:
                  NODE_ENV: test
                  CI: true

                  # BWS Integration
                  BWS_ACCESS_TOKEN: ${{ secrets.BWS_ACCESS_TOKEN }}
                  BWS_PROJECT: theanswer-ai
                  BWS_ENV: local

                  # Auth0 (non-sensitive)
                  AUTH0_ISSUER_BASE_URL: https://answer-ai.us.auth0.com
                  AUTH0_BASE_URL: http://localhost:3000

                  # Test Users (non-sensitive)
                  TEST_USER_ENTERPRISE_ADMIN_EMAIL: alpha+enterprise-admin@theanswer.ai
                  TEST_USER_ENTERPRISE_MEMBER_EMAIL: alpha+enterprise-member@theanswer.ai
                  TEST_USER_ENTERPRISE_BUILDER_EMAIL: alpha+enterprise-builder@theanswer.ai
                  TEST_ENTERPRISE_AUTH0_ORG_ID: org_unQ8OLmTNsxVTJCT
                  TEST_ENTERPRISE_ORG_NAME: local-dev

                  # Service URLs
                  API_URL: http://localhost:4000
                  BASE_URL: http://localhost:3000

                  # Redis
                  REDIS_HOST: localhost
                  REDIS_PORT: 6379

                  # Storage & Testing
                  ENABLE_E2E_ENDPOINTS: true
                  BLOB_STORAGE_PATH: /tmp/.flowise-test/storage

                  # Test API Keys (fake)
                  TEST_OPENAI_API_KEY: sk-test-openai-key-for-e2e
                  TEST_EXASEARCH_API_KEY: test-exa-search-key-for-e2e
              run: |
                  echo "🚀 Starting application stack..."
                  pnpm start > /tmp/stack.log 2>&1 &
                  STACK_PID=$!
                  echo "STACK_PID=$STACK_PID" >> $GITHUB_ENV

                  echo "⏳ Waiting for Flowise server (port 4000)..."
                  if ! timeout 90 bash -c 'until curl -sf http://localhost:4000/api/v1/ping; do sleep 2; done'; then
                      echo "❌ Flowise server failed to start"
                      echo "Last 50 lines of logs:"
                      tail -50 /tmp/stack.log
                      exit 1
                  fi
                  echo "✅ Flowise server ready"

                  echo "⏳ Waiting for Next.js app (port 3000)..."
                  if ! timeout 90 bash -c 'until curl -sf http://localhost:3000; do sleep 2; done'; then
                      echo "❌ Next.js app failed to start"
                      echo "Last 50 lines of logs:"
                      tail -50 /tmp/stack.log
                      exit 1
                  fi
                  echo "✅ Next.js app ready"

            - name: Verify BWS configuration
              if: runner.debug == '1' || failure()
              env:
                  BWS_ACCESS_TOKEN: ${{ secrets.BWS_ACCESS_TOKEN }}
                  BWS_PROJECT: theanswer-ai
                  BWS_ENV: local
                  NODE_ENV: test
              run: |
                  echo "🔍 BWS Configuration Check"
                  pnpm secure-run "bash -c '
                  echo \"DATABASE_TYPE: \${DATABASE_TYPE:-NOT_SET}\"
                  echo \"DATABASE_USER: \${DATABASE_USER:-NOT_SET} → test_\${DATABASE_USER}\"
                  echo \"DATABASE_NAME: \${DATABASE_NAME:-NOT_SET} → test_\${DATABASE_NAME}\"
                  echo \"DATABASE_PASSWORD: \${DATABASE_PASSWORD:0:3}*** (masked)\"
                  echo \"\"
                  echo \"Expected PostgreSQL:\"
                  echo \"  User: test_example_user\"
                  echo \"  DB: test_flowise\"
                  '"

            - name: Run E2E tests
              working-directory: apps/web
              env:
                  BASE_URL: http://localhost:3000
                  API_URL: http://localhost:4000
              run: pnpm test:e2e

            - name: Stop application stack
              if: always()
              run: |
                  if [ -n "$STACK_PID" ]; then
                    echo "Stopping stack (PID: $STACK_PID)..."
                    kill $STACK_PID 2>/dev/null || true
                    sleep 2
                    kill -9 $STACK_PID 2>/dev/null || true
                  fi

            - name: Upload stack logs on failure
              if: failure()
              uses: actions/upload-artifact@v4
              with:
                  name: stack-logs
                  path: /tmp/stack.log
                  retention-days: 7

            - name: Upload Playwright report
              if: always()
              uses: actions/upload-artifact@v4
              with:
                  name: playwright-report
                  path: apps/web/e2e/playwright-report/
                  retention-days: 30

            - name: Upload test results
              if: always()
              uses: actions/upload-artifact@v4
              with:
                  name: test-results
                  path: apps/web/e2e/test-results/
                  retention-days: 30
